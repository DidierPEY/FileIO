1.1	Principe de base
L’objectif est de transférer des informations contenues dans une base de données vers un fichier ou inversement. 

Ces informations sont contenues dans un ou plusieurs Segments permettant de décrire les différentes structures de données inhérentes à ces informations. Dans le cas de la base de données, c’est l’objet DataTable qui sera utilisé pour obtenir cette description,  alors que pour le fichier, c’est le fichier XML qui contiendra cette description.

Pour hiérarchiser les Segments il faut des Liens permettant de définir qu’elles sont les données mettant en relation ces différents Segments. Cette hiérarchisation est obligatoire dès que plusieurs segments sont présents.

Le fichier XML sera également utilisé pour connaitre les règles de transformation. Il faudra donc passer en paramètre soit l’emplacement du fichier, soit le contenu du fichier lui-même.

L’exportation lit le fichier alors que l’importation écrit dans le fichier.

IMPORTANT : llt.Data.ImportExport utilise un DataSet contenant les tables, que ce soit en import ou en export.  En export, la création des tables est effectuée par  llt.Data.ImportExport grâce à la description des champs. Cette création incombe à l’appelant dans le cas de l’importation.

1.2	Les Segments
Les segments décrivent le contenu des données. 

Pour les données issues d’un fichier,  le segment décrira de manière conditionnelle le contenu de l’enregistrement. Le conditionnement s’effectuera toujours sur le même nombre de caractère et à partir du début de l’enregistrement.

Concernant les données issues d’une table,  le fonctionnement descriptif est identique si ce n’est que le type de donnée doit être le nom d’un type de .NET. Dans le cas de l’importation, les tables créées par l’appelant devront portées les champs indiqués dans le fichier XML et respecté le type de données attendues.

1.3	Les Liens
Les liens permettent de définir  la relation qui existe entre les différents segments. Ils sont obligatoires dès lors que plusieurs segments sont présents.


1.4	Fonctionnement du fichier XML
  1.4.1	<description> 
Cette balise est obligatoire et doit être placée en premier.

  1.4.2	<fichier>
Cette balise est obligatoire et dépend de <description>. Elle permet de décrire le fichier par les attributs suivants :
-	nom= « {chemin}nomfichier{.ext}{,format incrément}, précise le nom du fichier à utiliser. La syntaxe de {chemin} doit répondre aux exigences du système d’exploitation. L’incrément peut être de la forme a..z ou 0..9 en sachant que le nombre de caractère est significatifs. Par exemple a..z signifie que l’on peut aller jusqu’à 26 version de fichiers alors que aa..zz en permet 26*26. Dans le cas où l’extension est précisée le nom du fichier sera le suivant : nomfichier.incrément.ext ;
-	maxenr=nnnnn, détermine le nombre maximum d’enregistrement dans le fichier. Cet attribut est facultatif mais s’il est précisé, format incrément devient obligatoire;
-	codage={default,ascii,uft7,utf8,utf32}  définit l’encodage du fichier. Cet attribut est facultatif et prendra pour valeur default  si absent;
-	sepenr= « x » définit le séparateur d’enregistrement (par exemple « \r\n »). La valeur « auto » permet de déterminer automatiquement le séparateur d’enregistrement utilisé dans le fichier. Cet attribut est obligatoire ;
-	sepchamp = « x » définit le séparateur de champ (par exemple « ; » pour un fichier csv). L’absence de cet attribut facultatif signifie que les champs sont délimités par leur taille;
-	delchamp = « x » définit le délimiteur de champ. Cet attribut est facultatif et est ignoré si aucun séparateur de champ n’est précisé.
REMARQUE : codage peut être renseigné lors de l’appel de la méthode d’import/export. Il remplace alors celui précisé par codage.

  1.4.2.1	<segment>
Cette balise dépend de <fichier> et doit être présente au moins une fois. Elle contient les deux attributs suivants :
-	nom= «nom du segment» nom du segment. Cet attribut est obligatoire et sa valeur doit être unique ;
-	uniquepar= «...»  un ou plusieurs caractères DEBUTANTS l’enregistrement et qui l’identifie de façon unique.  Cet attribut est obligatoire uniquement dans le cas de segments multiples.

Le contenu du segment est décrit par une à plusieurs balises <champ> dépendantes de <segment> et contenant les attributs suivants :
-	nom= « nom du champ » identifie le champ. Cet attribut est obligatoire et sa valeur doit être unique au sein du segment ;
-	format= « format du champ ». Cet attribut est obligatoire. Voir en annexe les différents formats supportés.

  1.4.2.2	<liens>
Cette balise dépend de <fichier> et est obligatoire à partir du moment où plusieurs segments sont présents dans le fichier. Elle permet de décrire l’enchainement des segments. Une ligne est constituée des éléments suivants (voir en annexe des exemples documentés) :
-	.{..} :  le ‘.’ détermine le niveau de l’arborescence dans la description. Une ligne doit au minimum commencée par un ‘.’ ;
-	nom_du_segment: est un nom de segment répertorié dans une des balises <segment> ;
-	{.[F,U]} : par défaut, un segment est obligatoire et peut être présent n fois au sein d’un même niveau d’arborescence. La spécification .F permet de le rendre facultatif, .U indique qu’il ne doit être présent qu’une seule fois dans l’arborescence en cours, .FU permet de le rendre facultatif mais s’il est présent, il ne devra être présent qu’une seule fois ;

  1.4.3	<tables>
Cette balise est obligatoire et dépend de <description>. Elle permet de définir les tables présentent dans le DataSet qui sera passé en paramètre ainsi que les liens entre ces différentes tables.

  1.4.3.1	<segment>
Cette balise dépend de <tables> et doit être présente au moins une fois. Elle contient les deux attributs suivants :
-	nom= «nom du segment» cet attribut est obligatoire et identifie le nom de la table dans le DataSet ;
-	uniquepar= «champ1,{champ2}» un ou plusieurs noms de champ identifiant de façon unique un enregistrement.  Cet attribut est obligatoire uniquement dans le cas de segments multiples ;

Le contenu du segment est décrit par une à plusieurs balises <champ> dépendantes de <segment> et contenant les attributs suivants :
-	nom= « nom du champ » identifie le champ. Cet attribut est obligatoire et sa valeur doit être unique au sein du segment ;
-	format= « format du champ ». Cet attribut est obligatoire. Il s’agit d’un nom de type reconnu par .NET.

  1.4.3.2	<segment> virtuel
Il s’agit d’une balise <segment> classique mais avec deux attributs supplémentaires obligatoires :
-	virtuel=«nom du segment» indique le nom du segment table dont il dépend
-	 si=«condition» indique le filtre à appliquer pour extraire les données correspondantes.

Plusieurs remarques importantes :
-	les segments virtuels ne doivent être déclarés que dans <import>
-	la condition si utilise un Table.Select(«condition»). La syntaxe de «condition» doit donc respecter les règles et restrictions édictées par .NET et non par le langage SQL de la base données ;
-	le nom du segment virtuel doit être unique comme dans le cas d’un segment classique ;
-	il est possible d’avoir plusieurs segments virtuels ;
-	les données du segment principal excluront automatiquement celles appartenant au(x) segment(s) virtuel(s).

  1.4.3.3	<liens>
Cette balise dépend de <tables> et est obligatoire à partir du moment où plusieurs tables sont présentes dans le DataSet. Elle permet de décrire la relation entre les différentes tables. Une ligne est constituée des éléments suivants (voir en annexe des exemples documentés) :
-	.{..} :  le ‘.’ détermine le niveau de l’arborescence dans la description. Une ligne doit au minimum commencée par un ‘.’
-	nom_du_segment: est un nom de segment répertorié dans une des balises <segment> ;
-	{.cp1{,cp2} } champs parents dépendant du segment supérieur à utiliser dans la relation ;
-	{.cf1,{cf2}} champs fils pour le segment en cours à utiliser dans la relation ;
-	{.[F,U]} : par défaut, un segment est obligatoire et peut être présent n fois au sein d’un même niveau d’arborescence. La spécification .F permet de le rendre facultatif, .U indique qu’il ne doit être présent qu’une seule fois dans l’arborescence en cours, .FU permet de le rendre facultatif mais s’il est présent, il ne devra être présent qu’une seule fois ;

  1.4.4	<export> 
Cette balise est obligatoire si le fichier XML doit être utilisé pour effectuer une mise à jour de <fichier> vers <tables>. 

Elle contient autant de balises <segment> que précisées dans < fichier>,  en utilisant l’attribut « nom » pour qualifier le segment. Chaque balise contient 0 (dans le cas où le segment doit être ignoré) à n lignes constituées de la sorte :
-	.nom_champ_fichier : nom d’un champ existant dans la balise <champ> du <segment> en cours (le «.» est obligatoire) ;
-	.nom_segment : nom d’un segment présent dans <tables> ;
-	{.nom_champ_table} : nom d’un champ appartenant à la table représentée par le segment. Si cette valeur facultative n’est pas précisée, le nom du champ utilisé sera celui indiqué par « nom_champ_fichier ».

Les enregistrements sont traités dans l’ordre physique du fichier.

  1.4.5	<import> 
Cette balise est obligatoire si le fichier XML doit être utilisé pour effectuer une mise à jour de <tables> vers <fichier>. 

Elle contient autant de balises <segment> que précisées dans <tables>,  en utilisant l’attribut « nom » pour qualifier le segment. Chaque balise contient 0 (dans le cas où le segment doit être ignoré) à n lignes constituées de la sorte :
-	.nom_champ_table : nom d’un champ existant dans la table représentée par le <segment> en cours (le «.» est obligatoire) ;
-	.nom_segment : nom d’un segment présent dans <fichier> ;
-	{.nom_champ_fichier} : nom d’un champ existant dans la balise <champ> pour le segment désigné. Si cette valeur facultative n’est pas précisée, le nom du champ utilisé sera celui indiqué par « nom_champ_table ».

Les segments, représentant les tables, sont traités dans l’ordre définit dans la balise <lien>. Les enregistrements sont triés par l’attribut « uniquepar » si celui-ci est précisé.

  1.4.6	Les constantes
Il est possible d’indiquer une constante plutôt qu’un nom de champ en utilisant la notation ‘.=<constante>’  ou ‘.=[<constante>]’  que ce soit en <import> ou en <export> :
.=valeur.nom_segment.nom_champ_table pour <export>
.=valeur.nom_segment.nom_champ_fichier pour <import>
  
ANNEXE 1: l’attribut “format”
Dans la description des champs, le format permet d’indiquer de façon très simple le type de données contenues dans le champ. Il est important de noter que lorsque l’attribut sepchamp est présent, la taille des champs est considérée comme variable. L’attribut doit donc préciser uniquement le type de donnée sans notion de longueur.
Les types des données sont identifiés de la manière suivante :
  -	a : indique du texte alphanumérique ;
  -	pour les nombres, la symbolique est la suivante :
    •	9 : indique un chiffre dans la partie entière ;
    •	{c} indique la présence d’un caractère distinctif entre la partie entière et la partie décimale. Ce caractère est facultatif, généralement ‘,’ ou ‘.’ mais peut être n’importe quel caractère autre que 9 et 0 ;
    •	0 : indique un chiffre dans la partie décimale. Si le séparateur de décimale est précisé, aucune notion de taille n’est nécessaire. Sinon, il faut obligatoirement indiquer le nombre de chiffres.
  -	Pour les dates et/ou heures, la symbolique est la suivante :
    •	dj : jour ;
    •	dm : mois ;
    •	da : année ;
    •	hh : heure ;
    •	hm : minute ;
    •	hs : seconde ;
    •	{c} séparateur facultatif, composé d’un seul caractère, pouvant prendre n’importe qu’elle valeur.
  Par défaut, la représentation de chaque élément de la date et de l’heure est faite sur deux caractères. Par exemple « djdmda » correspond à une date de type 011214   (jour, mois et année sur deux caractères).  Il en va de même pour l’heure, ou « hhhmhs » représente une heure de type 063050 (06 heures,  30 minutes et 50 secondes). 
  Dans les deux cas, il est possible d’utiliser un caractère de séparation d’où la notation suivante : « dj/dm/da » (01/12/14) ou « hh:hm:hs » (06:30:50). Bien sûr, la notation suivante est supportée : « dj/dm/da  hh:hm:hs » soit 01/12/14 06:30:50.
  L’ordre des types est libre, par exemple « dadmdj » ou « dadjdm », mais  il est impossible de mélanger date et heure, « dahhdm » est incorrect.
  -	Le type de données autre que « a » permet de contrôler que le contenu du champ est conforme au format annoncé. Pour une importation sans contrôle, il suffit de tout codifier en « a » ;
  -	Si les caractères de séparations indiqués dans le format doivent correspondre à ceux présents dans le fichier, n’importe quel caractère (et seulement 1 caractère) peut être utilisé (sauf restrictions précisées dans chaque type de données).

 En complément du type de données, la longueur est nécessaire. Elle est symbolisée de la sorte : [<longueur>]. Par exemple « a[15] » définit un champ fixe alphanumérique de 15 caractères. Quelques règles importantes :
  -	La longueur est inutile (et non traitée) dans le cas de champs délimités (qui sont par essence de longueur variable) ;
  -	La longueur est obligatoire dans le cas de champs non délimités ;
  -	« a » indique un texte alphanumérique de longueur variable alors que « a[1] » indique un texte de 1 caractère. Cette règle est valable pour tous les types de données ;
  -	la longueur est un nombre supérieur à 0. La limite supérieure n’est pas réellement bornée et dépend uniquement des contraintes techniques ;
  -	Concernant un nombre avec décimale(s), si le séparateur de décimal n’est pas présent dans le format, il faut obligatoirement indiquer une longueur soit pour la partie entière soit pour la partie décimale. Sans cette information, il est impossible de reconstituer le nombre correctement. Les notations « 9[l]0 » (partie entière fixe, partie décimale variable) ou « 90[l] » (partie entière variable, partie décimale fixe) sont acceptées. La notation « 90 » n’est pas tolérée puisque les deux parties sont variables. 
  -	Si un séparateur de décimales est présent dans le fichier, la notation est alors « 9<caractère de séparation>0 ». Aucune notion de taille ne doit être précisée ;
  -	Même si un séparateur de décimales est présent dans le fichier, celui-ci n’est pas obligatoire ce qui fait que les valeurs suivantes seront acceptées (‘.’ représente le séparateur de décimales) : « 20 », « 20.0 », « 0.5 » et  « .5 » ; 
  -	« dj », « dm », « ds », « hh », « hm » et « hs » n’acceptent aucune  information de taille. Ces données doivent forcément être codées sur deux caractères dans le fichier. Seule « da » autorise la notation da[4] pour une année sur 4 chiffres (au lieu de 2 pour « da »).

Un dernier type de données, « m » pour champ mémo, permet de supporter le multi-ligne au niveau des champs textes lorsque ceux-ci ne sont pas délimités. Quelques remarques importantes :
  -	Préférer les champs textes délimités qui sont naturellement multi-lignes donc plus rapides à traiter ;
  -	Un champ mémo étant par définition de longueur variable, aucune information de taille ne sera prise en compte ;
  -	Conséquence du point précédent, le champ mémo ne peut être utilisé que dans le cas où un séparateur de champ est précisé ;
  -	Un champ mémo se terminant par la présence d’un délimiteur de champ, il n’est pas autorisé en tant que dernier champ d’un enregistrement (en effet, dans ce cas, il fusionnera systématiquement avec le premier champ de l’enregistrement suivant ce qui faussera l’interprétation des données) ;
  -	La règle précédente est moins restrictive dans le cas où le segment est identifié par l’attribut « uniquepar » : dans ce cas, le champ mémo est délimité soit par un délimiteur de champ soit par le début d’un nouveau segment ;
  -	Le champ mémo ne doit contenir aucun séparateur de champ en tant que texte sous peine de provoquer une erreur d’interprétation au niveau du contenu des données ;

ANNEXE 2: la balise <lien> dans <fichier>
Cette balise est facultative dans le cas où <fichier> n’est constitué que d’un seul segment. Ceci étant, si elle précisée, elle sera prise en compte comme dans le cas d’un traitement multi-segments. 

Quelques exemples :
<lien>
.entetes
.lignes
</lien>
Dans cet exemple, le fichier peut être constitué de 1 à n enregistrements  « entetes », puis de 1 à n « lignes ». Ces segments étant obligatoire (valeur par défaut), il faut au minimum 1 enregistrement de chaque. Le fichier doit obligatoirement commencer par un enregistrement « entetes » et finir par un enregistrement « lignes ». Toute autre présentation déclenchera une erreur.

<lien>
.entetes.U
.lignes
</lien>
Dans cet exemple, seul UN enregistrement « entêtes » est toléré. C’est la seule différence avec l’exemple précédent.

<lien>
.entetes
..infos.FU
..lignes
</lien>
Un exemple plus complet, décrivant qu’un enregistrement « entetes », est  optionnellement suivi par un et un seul enregistrement « infos » puis par 1 à n « lignes ». Le fichier doit être constitué au minimum d’un enregistrement « entetes » suivi d’un enregistrement « lignes ».
Les ‘..’ permettent de préciser que les segments « infos » et « lignes » dépendent d’ « entetes ». Il n’est donc pas possible que ces segments se retrouvent seuls dans le fichier sans être précédés d’ « entetes ». De la même manière, il n’est pas possible que deux segments « entetes » se suivent.
Ils permettent également de créer un bloc logique qui pourra être répété n fois dans le fichier. A supposer que l’exemple parle de commandes clients, le fichier pourra être constitué de plusieurs commandes clients.

<lien>
.entetes.U
..infos.FU
..lignes
</lien>
Cet exemple est identique à celui de ci-dessus si n’est qu’il ne peut n’y avoir qu’un seul enregistrement « entetes ».

<lien>
.entetes
..infos.FU
..lignes
...infosl.FU
</lien>
Dans ce dernier exemple, chaque enregistrement « lignes » est éventuellement suivi d’un et un seul enregistrement « infosl ».
